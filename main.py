from config_class import TOKEN
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import aiohttp
import datetime
from deep_translator import GoogleTranslator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
NUMBERS_API_URL = "http://numbersapi.com/"
translator = GoogleTranslator(source='auto', target='ru')

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    waiting_for_number = State()
    waiting_for_date = State()
    waiting_for_year = State()
    waiting_for_math = State()

async def translate_to_russian(text: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"""
    try:
        return translator.translate(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text

async def get_number_fact(number: str, fact_type: str = "trivia") -> str:
    """–ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç –æ —á–∏—Å–ª–µ"""
    url = f"{NUMBERS_API_URL}{number}/{fact_type}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    fact = await response.text()
                    return await translate_to_russian(fact)
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç –æ —á–∏—Å–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ NumbersAPI: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

@dp.message(Command("getnumber"))
async def get_number_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /getnumber"""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –Ω—ë–º:")
    await state.set_state(Form.waiting_for_number)

@dp.message(Form.waiting_for_number)
async def process_number(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —á–∏—Å–ª–∞"""
    number = message.text.strip()
    if number.lstrip('-').isdigit():
        fact = await get_number_fact(number)
        await message.answer(f"üî¢ –§–∞–∫—Ç –æ —á–∏—Å–ª–µ {number}:\n\n{fact}")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
    await state.clear()

@dp.message(Command("getdate"))
async def get_date_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /getdate"""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 29.02), –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ–± —ç—Ç–æ–º –¥–Ω–µ:")
    await state.set_state(Form.waiting_for_date)

@dp.message(Form.waiting_for_date)
async def process_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã"""
    date_input = message.text.strip()
    try:
        day, month = map(int, date_input.split('.'))
        test_date = datetime.date(2020, month, day)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã
        fact = await get_number_fact(f"{month}/{day}", "date")
        await message.answer(f"üìÖ –§–∞–∫—Ç –æ –¥–∞—Ç–µ {day:02d}.{month:02d}:\n\n{fact}")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–î–î.–ú–ú).")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã: {e}")
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await state.clear()

@dp.message(Command("getyear"))
async def get_year_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /getyear"""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ (4 —Ü–∏—Ñ—Ä—ã), –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –Ω—ë–º:")
    await state.set_state(Form.waiting_for_year)

@dp.message(Form.waiting_for_year)
async def process_year(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ–¥–∞"""
    year = message.text.strip()
    if year.isdigit() and len(year) == 4 and 0 < int(year) <= datetime.datetime.now().year + 10:
        fact = await get_number_fact(year, "year")
        await message.answer(f"üìÖ –§–∞–∫—Ç –æ {year} –≥–æ–¥–µ:\n\n{fact}")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (4 —Ü–∏—Ñ—Ä—ã, –Ω–µ –±–æ–ª–µ–µ 10 –ª–µ—Ç –≤–ø–µ—Ä–µ–¥ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ).")
    await state.clear()

@dp.message(Command("getmath"))
async def get_math_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /getmath"""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç –æ –Ω—ë–º:")
    await state.set_state(Form.waiting_for_math)

@dp.message(Form.waiting_for_math)
async def process_math(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —á–∏—Å–ª–∞ –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–∫—Ç–∞"""
    number = message.text.strip()
    if number.lstrip('-').isdigit():
        fact = await get_number_fact(number, "math")
        await message.answer(f"‚ûï –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç –æ {number}:\n\n{fact}")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    await state.clear()

@dp.message(Command("getrandom"))
async def get_random_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /getrandom"""
    fact = await get_number_fact("random")
    await message.answer(f"üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç:\n\n{fact}")

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    help_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ —á–∏—Å–ª–∞—Ö.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/getnumber - —Ñ–∞–∫—Ç –æ —á–∏—Å–ª–µ\n"
        "/getdate - —Ñ–∞–∫—Ç –æ –¥–∞—Ç–µ (–≤–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú)\n"
        "/getyear - —Ñ–∞–∫—Ç –æ –≥–æ–¥–µ\n"
        "/getmath - –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç\n"
        "/getrandom - —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç\n\n"
        "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º!"
    )
    await message.answer(help_text)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())