import asyncio
import logging
import json
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.exceptions import TelegramBadRequest
from config import TOKEN, WS_URL, ADMIN_CHAT_ID
import websockets

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –±–æ—Ç–∞
logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger("aiogram")  # –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏–π –±–æ—Ç–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
bot = Bot(token=TOKEN)  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API
dp = Dispatcher()  # –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä (–æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä–∞—Ö EXMO)
VALID_TRADING_PAIRS = [
    "ETH_USDT", "BTC_USDT", "LTC_USD", "XRP_USDT", "ADA_USDT",
    "DOGE_USDT", "BNB_USDT", "SOL_USDT"  # –£–±—Ä–∞–Ω—ã —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä—ã, –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ
]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
trade_data = {}  # –î–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–∞—Ö
# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
is_connected = False


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
async def websocket_handler():
    global trade_data, is_connected
    while True:
        try:
            uri = WS_URL
            async with websockets.connect(uri) as websocket:
                is_connected = True
                logger.info("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                try:
                    await bot.send_message(chat_id=ADMIN_CHAT_ID, text="‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ EXMO!")
                except TelegramBadRequest as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")

                # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ—Ä–≥–∞—Ö
                subscribe_msg = {
                    "id": 1,
                    "method": "subscribe",
                    "topics": [f"spot/trades:{pair}" for pair in VALID_TRADING_PAIRS]
                }
                await websocket.send(json.dumps(subscribe_msg))
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {json.dumps(subscribe_msg)}")

                while True:
                    message = await websocket.recv()
                    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
                    try:
                        data = json.loads(message)
                        logger.debug(f"–†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")
                        if "data" in data and "trades" in data["data"]:
                            for trade in data["data"]["trades"]:
                                pair = trade.get("pair", "").replace("-", "_")
                                if pair in VALID_TRADING_PAIRS:
                                    if pair not in trade_data:
                                        trade_data[pair] = []
                                    trade_data[pair].append(trade)
                                    trade_data[pair] = trade_data[pair][-10:]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Å–¥–µ–ª–æ–∫
                                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–∞—Ä–µ {pair}: {trade}")
                        elif "event" in data and data["event"] == "error":
                            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {data}")
                            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –ø–∞—Ä, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–æ—á–Ω—ã–µ
                        elif "code" in data and data["code"] == 1:
                            logger.info("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
                    except json.JSONDecodeError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")

        except websockets.ConnectionClosed as e:
            is_connected = False
            logger.error(f"WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ: {e}")
            try:
                await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"‚ùå WebSocket —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ: {e}")
            except TelegramBadRequest as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
            await asyncio.sleep(5)
        except websockets.WebSocketException as e:
            is_connected = False
            logger.error(f"–û—à–∏–±–∫–∞ WebSocket: {e}")
            try:
                await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")
            except TelegramBadRequest as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
            await asyncio.sleep(5)
        except Exception as e:
            is_connected = False
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ WebSocket: {e}")
            try:
                await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"‚ùå –û—à–∏–±–∫–∞: {e}")
            except TelegramBadRequest as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
            await asyncio.sleep(5)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id
@dp.message(Command("getid"))
async def get_chat_id(message: Message):
    await message.answer(f"–í–∞—à chat_id: {message.chat.id}")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /Trades
@dp.message(Command("Trades"))
async def get_trades_handler(message: Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: /Trades ETH/USDT")
        return

    trading_pair = parts[1].strip().upper().replace("/", "_")

    if trading_pair not in VALID_TRADING_PAIRS:
        await message.answer(f"–ü–∞—Ä–∞ {trading_pair} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã: {', '.join(VALID_TRADING_PAIRS)}")
        return

    if not is_connected:
        await message.answer("‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return

    trades = trade_data.get(trading_pair, [])
    if not trades:
        await message.answer(
            f"–î–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–∞—Ö –ø–æ –ø–∞—Ä–µ {trading_pair.replace('_', '/')} –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–¥–µ–ª–∫–∞—Ö
    response_text = f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –ø–æ –ø–∞—Ä–µ {trading_pair.replace('_', '/')}:\n\n"
    for trade in trades[-3:]:  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–¥–µ–ª–∫–∏
        response_text += (
            f"‚è∞ –í—Ä–µ–º—è: {trade.get('date', 'N/A')}\n"
            f"üí∞ –¶–µ–Ω–∞: {trade.get('price', 'N/A')} {trading_pair.split('_')[1]}\n"
            f"üìä –û–±—ä–µ–º: {trade.get('quantity', 'N/A')} {trading_pair.split('_')[0]}\n"
            f"üîÑ –¢–∏–ø: {trade.get('type', 'N/A')}\n"
            f"--------------------\n"
        )

    await message.answer(response_text)


# –ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ WebSocket
async def main():
    try:
        logger.info("–ë–æ—Ç –∏ WebSocket –∑–∞–ø—É—â–µ–Ω—ã!")
        asyncio.create_task(websocket_handler())
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")


if __name__ == "__main__":
    asyncio.run(main())